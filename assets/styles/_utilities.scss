/**
 * Utilities
 * --------------------------------------------------------------------------- */

/* ====== VARIABLES ====== */

/* === Breakpoints === */

$breakpoints: (
	xs: 640px,
	sm: 768px,
	md: 896px,
	lg: 1024px,
	xl: 1152px
);

/* === Colors === */

$color-light:   #f5f5f5;
$color-dark:    #2c2d33;
$color-accent:  #a9abb5;
$color-heading: #43454b;
$color-body:    #333333;
$color-link:    #2c2d33;
$color-white:   #ffffff;
$color-success: #2ecc71;
$color-error:   #f54d56;
$color-info:    #3498db;
$color-grey:	#a9abb5;
$color-border:  #eeeeee;
$color-input:   #dddddd;

/* === Typography === */

$font-family: 'Source Sans Pro', Helvetica, sans-serif;
$normal:      400;
$bolder:      600;
$bold:        700;

/* === Structure === */

$site-padding:	  2rem;
$site-margin:	  2rem;
$site-border:	  1px solid $color-border;
$site-content:    calc(75% - (#{$site-padding}+#{$site-margin}));
$site-sidebar:    25%;
$site-radius:     0.1rem;
$site-transition: all .2s ease;

/* ====== MIXINS ====== */

/* === Breakpoints === */

@mixin breakpoint( $breakpoint ) {

    @if map-has-key( $breakpoints, $breakpoint ) {

        @media ( min-width: #{ map-get( $breakpoints, $breakpoint ) } ) {
            @content;
        }

    } @else if type_of( $breakpoint ) == number and unit( $breakpoint ) == px or unit( $breakpoint ) == em or unit( $breakpoint ) == rem {

        @media (min-width: $breakpoint ) {
            @content;
        }

    } @else {

        @warn "No value could be retrieved from `#{$breakpoint}`. "
              + "Please make sure it is defined in `$breakpoints` map, or it is a valid number with supported unit of px, em or rem.";
    }
}

/* === Clearfix === */

@mixin clearfix {
	clear: both;

	&:before,
	&:after {
		display: table;
		content: '';
	}

	&:after {
		clear: both;
	}
}

/* === Transitions === */

@mixin transition {
	-webkit-transition: all .3s ease;
	-moz-transition: all .3s ease;
	-o-transition: all .3s ease;
	transition: all .3s ease;
}

/* ====== FUNCTIONS ====== */

/* === Modular size === */

// Calculate vw size and set max-width.
@mixin scale($properties...) {
    @each $property in $properties {
        @if (str-index($property, "padding")) {
            #{$property}: 3rem;
        } @else {
            #{$property}: 2rem;
        }
    }
    // Prevent $value from getting too big
    @media (min-width: #{map-get($breakpoints, xs)}) {
        @each $property in $properties {
            #{$property}: 4rem;
        }
    }
    // Prevent $value from getting too big
    @media (min-width: #{map-get($breakpoints, sm)}) {
        @each $property in $properties {
            @if (str-index($property, "padding")) {
                #{$property}: 6rem;
            }
        }
    }
}